<?php

namespace App\Exceptions;

use Illuminate\Auth\AuthenticationException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    protected function unauthenticated($request, AuthenticationException $exception)
    {
        if ($request->expectsJson()) {
            return response()->json(null, 401);
        }

        return parent::unauthenticated($request, $exception); // TODO: Change the autogenerated stub
    }

    static $__countEx = false;

    public function report(Throwable $exception)
    {
        $statusCode = 0;
        if ($exception instanceof NotFoundHttpException) {
            $statusCode = $exception->getStatusCode();
        }
        $msg = '';
        if (!self::$__countEx && !in_array($statusCode, [404, 303])) {

            self::$__countEx = true;

            $msg .= "\nMessage: " . $exception->getMessage();
            $msg .= "\nStatusCode: " . $statusCode;
            $msg .= "\nFile: " . $exception->getFile() . ':' . $exception->getLine();
            $traces = $exception->getTrace();

            $msg .= collect($traces)->filter(function ($item) {
                return strpos(@$item['file'], '\app\Http\\') !== false || strpos(@$item['file'], '/app/Http') !== false;
            })->map(function ($item) {
                return "\nFile: " . @$item['file'] . ':' . @$item['line'];

            })->implode('');

            self::pushNotification($msg);
        }

        return parent::report($exception);
    }

    static function pushNotification($msg = '', $option = [])
    {
        $msg .= "\n";
        $msg .= "\nREQUEST_URI: " . !isset($option['REQUEST_URI']) ? @$_SERVER['REQUEST_URI'] : '';
        $msg .= "\nREMOTE_ADDR: " . @$_SERVER['REMOTE_ADDR'];
        $msg .= "\nHTTP_X_ORIGINAL_FORWARDED_FOR: " . @$_SERVER['HTTP_X_ORIGINAL_FORWARDED_FOR'];
        $msg .= "\nHTTP_X_FORWARDED_FOR: " . @$_SERVER['HTTP_X_FORWARDED_FOR'];
        $msg .= "\nHTTP_X_REAL_IP: " . @$_SERVER['HTTP_X_REAL_IP'];
        $msg .= "\n\nHTTP_USER_AGENT: " . @$_SERVER['HTTP_USER_AGENT'];
        $msg .= "\nHTTP_REFERER: " . @$_SERVER['HTTP_REFERER'];
        $msg .= "\nSERVER_NAME: " . @$_SERVER['SERVER_NAME'];
        $msg .= "\nHTTP_HOST: " . @$_SERVER['HTTP_HOST'];

        $ch = curl_init();
        $url = 'https://api.telegram.org/bot1821730529:AAEMBG79rMbfyUTOi2tUkT5VAxmkYOEeJI4/sendMessage?chat_id=957678285&text=';
        if (config('app.env') !== 'production') {
            $url = 'https://api.telegram.org/bot1821730529:AAEMBG79rMbfyUTOi2tUkT5VAxmkYOEeJI4/sendMessage?chat_id=957678285&text=';
        }
        if (@$option['link_telegram']) {
            $url = $option['link_telegram'];
        }
        curl_setopt($ch, CURLOPT_URL, $url . urlencode($msg));
        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_exec($ch);
        curl_close($ch);

        return true;
    }
}
